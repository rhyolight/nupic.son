indexes:

# used to retrieve User entities
- kind: User
  properties:
  - name: account
  - name: status

# used to retrieve User entities
- kind: User
  properties:
  - name: user_id
  - name: status

# used to figure out which proposals to accept
- kind: GSoCProposal
  properties:
  - name: accept_as_project
  - name: org
  - name: status
  - name: score
    direction: desc

# used to figure out which proposals to accept
- kind: GSoCProposal
  properties:
  - name: accept_as_project
  - name: has_mentor
  - name: org
  - name: status
  - name: score
    direction: desc

# Used to update StudentProjects with the grade_decsion contained in a
# GradingRecord.
- kind: GradingRecord
  properties:
  - name: grading_survey_group
  - name: __key__

# used to order the accepted GCIorganizations on there name
- kind: GCIOrganization
  properties:
  - name: scope
  - name: status
  - name: name

# used to fetch organizations accepted to GSoC program
- kind: GSoCOrganization
  properties:
  - name: scope
  - name: status
  - name: name

# used to determine which orgs have more then 0 slots assigned
- kind: GSoCOrganization
  properties:
  - name: scope
  - name: status
  - name: slots

# used to determine whether a logo has been set
- kind: GSoCOrganization
  properties:
  - name: scope
  - name: status
  - name: logo_url

# used to get the proposal comments in the order of the date of submission
- kind: GSoCComment
  ancestor: yes
  properties:
  - name: created

# used to order GCIComments under a GCITask with that GCITask being
# its ancestor entity in the entity group.
- kind: GCIComment
  ancestor: yes
  properties:
  - name: created_on

# used to order GCIWorkSubmissions under a GCITask with that GCITask being
# its ancestor entity in the entity group.
- kind: GCIWorkSubmission
  ancestor: yes
  properties:
  - name: submitted_on

# used to fetch all the valid tasks for a given mentor under a program
- kind: GCITask
  properties:
  - name: mentors
  - name: program
  - name: status

# used to determine whether a logo has been set for GCIOrganization
- kind: GCIOrganization
  properties:
  - name: scope
  - name: status
  - name: logo_url

# used to determine the winners of GCI, top N scores are chosen as winners
# where N is set in the program settings.
- kind: GCIScore
  properties:
  - name: program
  - name: points
    direction: desc

# Add a new index for querying the tasks based on student profile
# and task status IN query.
- kind: GCITask
  properties:
  - name: student
  - name: status

# AUTOGENERATED

# This index.yaml is automatically updated whenever the dev_appserver
# detects that a new type of query is run.  If you want to manage the
# index.yaml file manually, remove the above marker line (the line
# saying "# AUTOGENERATED").  If you want to manage some indexes
# manually, move them above the marker line.  The index.yaml file is
# automatically uploaded to the admin console when you next deploy
# your application using appcfg.py.

- kind: GCITask
  properties:
  - name: program
  - name: status
  - name: closed_on

- kind: GCITask
  properties:
  - name: program
  - name: status
  - name: modified_on
